<?php
/**
 * Bitrix Framework
 * @package    bitrix
 * @subpackage main
 * @copyright  2001-2022 Bitrix
 */

namespace Bitrix\Main\Lib\Routing;

use Bitrix\Main\Lib\Middleware\Middleware;

/**
 * @package    bitrix
 * @subpackage main
 */
class Options
{
	// could be auto-generated by Reflection and prop-prefixes
	public static $optionList = [
		'methods', 'middleware', 'prefix', 'name', 'domain', 'where', 'default', 'layout',
		'bindSolution', 'bindRoute', 'bindParameter'
	];

	protected $methods = [];

	protected $middleware = [];

	protected $prefix;

	protected $parentPrefixes = [];

	protected $name;

	protected $parentNames = [];

	protected $domain;

	protected $where = [];

	protected $default = [];

	protected $site;

	protected $layout;

	/** @var \Bitrix\Main\Lib\Solution */
	protected $solution;

	protected $solutionBinding = [];

	protected $routeBinding = [];

	protected $boundParamaters = [];

	const COMPLEX_ROUTE_SEPARATOR = ':';

	/**
	 * @param Options $anotherOptions
	 */
	public function mergeWith($anotherOptions)
	{
		$this->middleware = array_merge($this->middleware, $anotherOptions->middleware);
		$this->solutionBinding = array_merge($this->solutionBinding, $anotherOptions->solutionBinding);
		$this->routeBinding = array_merge($this->routeBinding, $anotherOptions->routeBinding);

		if ($anotherOptions->prefix != '')
		{
			$this->parentPrefixes[] = $anotherOptions->prefix;
		}

		if ($anotherOptions->name != '')
		{
			$this->parentNames[] = $anotherOptions->name;
		}

		$this->solution = $anotherOptions->solution;
		$this->site = $anotherOptions->site;
		$this->layout = $anotherOptions->layout;
	}

	public function methods($methods)
	{
		$this->methods = $methods;
	}

	/**
	 * @return array
	 */
	public function getMethods()
	{
		return $this->methods;
	}

	public function middleware($middleware)
	{
		if (is_array($middleware))
		{
			$this->middleware = array_merge($this->middleware, $middleware);
		}
		else
		{
			$this->middleware[] = $middleware;
		}
	}

	/**
	 * @return Middleware[]
	 */
	public function getMiddleware()
	{
		return $this->middleware;
	}

	/**
	 * @return void
	 */
	public function bindSolution($solutionName, $currentSolutionName)
	{
		$this->solutionBinding[$solutionName] = $currentSolutionName;
	}

	/**
	 * @return array
	 */
	public function getSolutionBinding()
	{
		return $this->solutionBinding;
	}

	/**
	 * @return void
	 */
	public function bindRoute($routeName, $routeAlias)
	{
		$this->routeBinding[$routeName] = $routeAlias;
	}

	/**
	 * @return array
	 */
	public function getRouteBinding()
	{
		return $this->routeBinding;
	}

	public function bindParameter($parameterName, $valueCallback)
	{
		$this->boundParamaters[$parameterName] = $valueCallback;
	}

	public function hasBoundParameter($parameterName)
	{
		return !empty($this->boundParamaters[$parameterName]);
	}

	public function getBoundParameter($parameterName, $routeParameters)
	{
		// bind with routeParameters and default values
		if (!empty($this->boundParamaters[$parameterName]))
		{
			return call_user_func_array($this->boundParamaters[$parameterName], array_merge($this->default, $routeParameters));
		}
	}

	public function getBoundParameters()
	{
		return $this->boundParamaters;
	}

	public function prefix($prefix)
	{
		$this->prefix = trim($prefix, '/');
	}

	public function hasPrefix()
	{
		return $this->prefix != '' || !empty($this->parentPrefixes);
	}

	public function getFullPrefix()
	{
		// concat parentPrefixes with this prefix
		$prefixes = $this->parentPrefixes ?: [];
		$names = $this->parentNames ?: [];

		if ($this->prefix != '')
		{
			$prefixes[] = $this->prefix;
		}

		if ($this->name != '')
		{
			$names[] = $this->name;
		}

		// replace parameters
		foreach ($prefixes as $i => $prefix)
		{
			$nameStack = array_slice($names, 0, $i + 1);
			$prefixName = join(static::COMPLEX_ROUTE_SEPARATOR, $nameStack);

			$prefixes[$i] = static::replaceParameterName($prefix, $prefixName);
		}

		return '/'.join('/', $prefixes);
	}

	public static function replaceParameterName($uri, $routeName)
	{
		if (strpos($uri, '{') !== false)
		{
			// there are parameters, collect them
			preg_match_all('/{([a-z0-9_]+)}/i', $uri, $matches);
			$parameterNames = $matches[1];

			foreach ($parameterNames as $parameterName)
			{
				// add complex name as prefix
				$uri = str_replace(
					'{'.$parameterName.'}',
					'{'.$routeName . static::COMPLEX_ROUTE_SEPARATOR . $parameterName.'}',
					$uri
				);
			}
		}

		return $uri;
	}

	public function name($name)
	{
		$this->name = $name;
	}

	public function hasName()
	{
		return $this->name != '';
	}

	public function getFullName()
	{
		if ($this->name == '')
		{
			// route should have its own name
			return '';
		}

		// concat parentPrefixes with this prefix
		$parts = $this->parentNames ?: [];
		$parts[] = $this->name;

		return join(static::COMPLEX_ROUTE_SEPARATOR, $parts);
	}

	/**
	 * @return array
	 */
	public function getParentNames(): array
	{
		return $this->parentNames;
	}

	/**
	 * @param string $domain
	 */
	public function domain($domain)
	{
		$this->domain = $domain;
	}

	public function where($parameter, $pattern)
	{
		$this->where[$parameter] = $pattern;
	}

	public function hasWhere($parameter)
	{
		return array_key_exists($parameter, $this->where);
	}

	public function getWhere($parameter = null)
	{
		if ($parameter === null)
		{
			return $this->where;
		}
		else
		{
			return $this->where[$parameter];
		}
	}

	public function default($parameter, $value)
	{
		$this->default[$parameter] = $value;
	}

	public function hasDefault($parameter)
	{
		return array_key_exists($parameter, $this->default);
	}

	public function getDefault($parameter = null)
	{
		if ($parameter === null)
		{
			return $this->default;
		}
		else
		{
			return $this->default[$parameter];
		}
	}

	public function site($name)
	{
		$this->site = $name;
	}

	public function hasSite()
	{
		return $this->site != '';
	}

	public function getSite()
	{
		return $this->site;
	}

	public function layout($name)
	{
		$this->layout = $name;
	}

	public function hasLayout()
	{
		return $this->layout != '';
	}

	public function getLayout()
	{
		return $this->layout;
	}

	public function solution($solution)
	{
		$this->solution = $solution;
	}

	public function hasSolution()
	{
		return !empty($this->solution);
	}

	public function getSolution()
	{
		return $this->solution;
	}

	/**
	 * Clears runtime options for the new scope
	 * Saves global options and
	 */
	public function clearCurrent()
	{
		$this->prefix = null;
		$this->name = null;
	}
}